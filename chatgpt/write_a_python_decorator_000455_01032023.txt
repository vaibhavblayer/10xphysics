Q. Write a python decorator.

def my_decorator(func):
    def wrapper(*args, **kwargs):
        print("Before calling " + func.__name__)
        result = func(*args, **kwargs)
        print("After calling " + func.__name__)
        return result
    return wrapper

@my_decorator
def add(x, y):
    return x + y

print(add(2, 3))

# Output:
# Before calling add
# After calling add
# 5